#!  █████╗ ████████╗████████╗ █████╗  ██████╗██╗  ██╗    ███████╗████████╗██╗   ██╗██╗     ███████╗
#! ██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██╔════╝██║ ██╔╝    ██╔════╝╚══██╔══╝╚██╗ ██╔╝██║     ██╔════╝
#! ███████║   ██║      ██║   ███████║██║     █████╔╝     ███████╗   ██║    ╚████╔╝ ██║     █████╗
#! ██╔══██║   ██║      ██║   ██╔══██║██║     ██╔═██╗     ╚════██║   ██║     ╚██╔╝  ██║     ██╔══╝
#! ██║  ██║   ██║      ██║   ██║  ██║╚██████╗██║  ██╗    ███████║   ██║      ██║   ███████╗███████╗
#! ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝    ╚══════╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝

#! ██████╗      ██╗
#! ██╔══██╗     ██║
#! ██║  ██║     ██║
#! ██║  ██║██   ██║
#! ██████╔╝╚█████╔╝
#! ╚═════╝  ╚════╝
# # Unified function to handle both image searching and performing actions
# def action_main_handler_1():
#     global stop_thread_action1, image_found, pause_other_items, action_timer, Action_Light_Thread
#     window = focus_window(window_title)
#     if not window:
#         print(f"Window '{window_title}' not found.")
#         return
#     def search_and_act():
#         holding_keys = False
#         while not stop_thread_action1:
#             # Image searching logic
#             if any(find_image(image, confidence=actionF[image]) for image in actionF):
#                 image_found = True
#                 print("Image found, resetting action timer.")
#                 action_timer = time.time()  # Reset the 5-second timer when image is found
#             else:
#                 image_found = False
#                 print("Image not found.")
#             time.sleep(0.05)  # Check image every 0.05 seconds
#             # Action performing logic
#             if image_found:
#                 pause_other_items = True
#                 holding_keys = True
#                 while holding_keys and not stop_thread_action1:
#                     # Continuously press keys for 5 seconds
#                     if time.time() - action_timer >= 5:
#                         print("5 seconds of action completed. Stopping.")
#                         holding_keys = False
#                         break
#                     # Key press logic
#                     key_down(window, 'd')
#                     press_key(window, 'j')
#                     press_key(window, 'j')
#                     key_up(window, 'd')
#                     time.sleep(0.1)
#                 # Release the keys after action is completed
#                 key_up(window, 'd')
#                 pause_other_items = False
#             else:
#                 time.sleep(0.05)  # Prevent CPU usage when idle
#     # Start or stop the action handler
#     if Action_Light_Thread and Action_Light_Thread.is_alive():
#         stop_thread_action1 = True
#         Action_Light_Thread.join()  # Wait for thread to stop
#         ACTION_1_PY.config(text="dj", bg="#607af0", fg="#222222")  # Update button
#     else:
#         stop_thread_action1 = False
#         Action_Light_Thread = threading.Thread(target=search_and_act)
#         Action_Light_Thread.daemon = True
#         Action_Light_Thread.start()
#         ACTION_1_PY.config(text="Stop", bg="#1d2027", fg="#fc0000")  # Update button
# # Button definition to start/stop the action
# ACTION_1_PY = Button(ROOT, text="dj", bg="#607af0", fg="#222222", width=5, height=0,
#                   command=action_main_handler_1, font=("Jetbrainsmono nfp", 10, "bold"), relief="flat")
# ACTION_1_PY.pack( side="left", padx=(1, 1), pady=(1, 1))

#! ██╗  ██╗███████╗ █████╗ ██╗   ██╗██╗   ██╗
#! ██║  ██║██╔════╝██╔══██╗██║   ██║╚██╗ ██╔╝
#! ███████║█████╗  ███████║██║   ██║ ╚████╔╝
#! ██╔══██║██╔══╝  ██╔══██║╚██╗ ██╔╝  ╚██╔╝
#! ██║  ██║███████╗██║  ██║ ╚████╔╝    ██║
#! ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝  ╚═══╝     ╚═╝
# stop_thread_action3 = True
# fight_thread = None
# pause_other_items = False
# def fight_heavy_handler(window):
#     global pause_other_items
#     holding_keys = False
#     fight_duration = 5  # Initial duration for holding the keys (in seconds)
#     try:
#         while not stop_thread_action3:
#             focus_window(window_title)
#             if any(find_image(image, confidence=actionF[image]) for image in actionF):
#                 # Pause the other items handler
#                 pause_other_items = True
#                 start_time = time.time()
#                 while time.time() - start_time < fight_duration:
#                     if not holding_keys:
#                         key_down(window, 'j')
#                         key_down(window, 'l')
#                         holding_keys = True
#                     # Check at the 3-second mark if the actionF image is still present
#                     if time.time() - start_time >= 3:
#                         if any(find_image(image, confidence=actionF[image]) for image in actionF):
#                             print("Fight image found again. Extending time.")
#                             # Extend the duration by resetting start_time and adding 5 more seconds
#                             start_time = time.time()
#                             fight_duration = 5
#                 # Release keys if holding
#                 if holding_keys:
#                     key_up(window, 'l')
#                     key_up(window, 'j')
#                     holding_keys = False
#                 # Unpause the other items handler after fight is done
#                 pause_other_items = False
#             time.sleep(0.05)
#     except KeyboardInterrupt: 
#         print("Fight thread stopped by user.")
#     finally:
#         key_up(window, 'l')
#         key_up(window, 'j')
#         pause_other_items = False
# def fight_Heavy():
#     global stop_thread_action3
#     window = focus_window(window_title)
#     if not window:
#         print(f"Window '{window_title}' not found.")
#         return
#     fight_thread = threading.Thread(target=fight_heavy_handler, args=(window,))
#     fight_thread.daemon = True
#     fight_thread.start()
#     fight_thread.join()
# def fight_function():
#     global stop_thread_action3, fight_thread, ACTION_3
#     if fight_thread and fight_thread.is_alive():
#         stop_thread_action3 = True
#         fight_thread.join()
#         ACTION_3.config(text="Heavy", bg="#607af0", fg="#222222")
#     else:
#         stop_thread_action3 = False
#         fight_thread = threading.Thread(target=fight_Heavy)
#         fight_thread.daemon = True
#         fight_thread.start()
#         ACTION_3.config(text="Stop", bg="#1d2027", fg="#fc0000")
# ACTION_3 = Button(ROOT, text="Heavy", bg="#607af0", fg="#222222", width=5, height=0, command=fight_function, font=("Jetbrainsmono nfp", 10, "bold"), relief="flat")
# ACTION_3.pack( side="left",padx=(1,1), pady=(1,1))






# Thread_Secret_Fights = True
# Thread_Reset_Secret_Fight = None
# def SecretFights():
#     global Thread_Secret_Fights
#     window = focus_window(window_title)
#     if not window:
#         print(f"Window '{window_title}' not found.")
#         return
#     try:
#         while not Thread_Secret_Fights:
#             focus_window(window_title)
#             if any(find_image(image, confidence=actionF[image], region=(214, 914, 375, 1031)) for image in actionF): press_keys_with_delays(window, 'x', 0.5, 'x', 0.5, 'x', 0.5, 'x', 0.5, 'x', 0.5, 'x', 0.5)
#             time.sleep(0.1)
#     except KeyboardInterrupt: print("Script stopped by user.")
# def Start_SecretFight():
#     global Thread_Secret_Fights, Thread_Reset_Secret_Fight, BT_Secret_Fights
#     if Thread_Reset_Secret_Fight and Thread_Reset_Secret_Fight.is_alive():
#         Thread_Secret_Fights = True
#         Thread_Reset_Secret_Fight.join()
#         BT_Secret_Fights.config(text="Secret", bg="#62e7ff", fg="#000000")
#     else:
#         Thread_Secret_Fights = False
#         Thread_Reset_Secret_Fight = threading.Thread(target=SecretFights)
#         Thread_Reset_Secret_Fight.daemon = True
#         Thread_Reset_Secret_Fight.start()
#         BT_Secret_Fights.config(text="Secret", bg="#1d2027", fg="#fc0000")
# BT_Secret_Fights = Button(ROOT, text="Secret", bg="#62e7ff", fg="#000000", width=5, height=0, command=Start_SecretFight, font=("Jetbrainsmono nfp", 10, "bold"), relief="flat")
# BT_Secret_Fights.pack(padx=(1, 1), pady=(1, 1))






#*  ███████╗██╗   ██╗███████╗███╗   ██╗████████╗    ██╗    ██╗     █████╗ ██████╗ ███████╗
#*  ██╔════╝██║   ██║██╔════╝████╗  ██║╚══██╔══╝    ██║    ██║    ██╔══██╗██╔══██╗██╔════╝
#*  █████╗  ██║   ██║█████╗  ██╔██╗ ██║   ██║       ██║ █╗ ██║    ███████║██║  ██║███████╗
#*  ██╔══╝  ╚██╗ ██╔╝██╔══╝  ██║╚██╗██║   ██║       ██║███╗██║    ██╔══██║██║  ██║╚════██║
#*  ███████╗ ╚████╔╝ ███████╗██║ ╚████║   ██║       ╚███╔███╔╝    ██║  ██║██████╔╝███████║
#*  ╚══════╝  ╚═══╝  ╚══════╝╚═╝  ╚═══╝   ╚═╝        ╚══╝╚══╝     ╚═╝  ╚═╝╚═════╝ ╚══════╝
def event_function_Ads():
    global stop_thread_event, event_light_thread, Event_Light_BT
    def event_items_handler(window):
        try:
            while not stop_thread_event:
                focus_window(window_title)
                # Handle the other image searches and actions
                if find_image(Home, confidence=0.8): press_key(window, 'f')
                elif find_image(Resume, confidence=0.8): press_key(window, 'r')

                elif find_image(Error_Processing_Video, confidence=0.8): press_key(window, 'esc') #! optional
                elif any(find_image(image, confidence=0.95) for image in continueADS): press_keys_with_delays(window, 'c', 1)

                elif find_image(Tournament_step1, confidence=0.8): press_keys_with_delays(window, 'u', 1, 'c', 1)

                elif find_image(later, confidence=0.8): press_global_screen_with_delays(( 1113, 728, 1)) #! need fixing

                # elif find_image(Select_CreepyParty, confidence=0.8): press_keys_with_delays(window, 'y', 1) #! optional
                elif find_image(Select_SelectOption, confidence=0.8): press_keys_with_delays(window, 'h', 1) #! optional

                # elif find_image(back_battlepass, confidence=0.8): press_keys_with_delays(window, 'b', 1)
                elif find_image(back_GPlay, confidence=0.8): press_ldplayer_screen_with_delays(window, (1628, 815, 2)) #! optional

                # elif any(find_image(image, confidence=actionF[image], region=Action_region) for image in actionF): press_keys_with_delays(window, 'q', 1, '0', 1, "m", 0) #! optional

                [click(window, ad_location.left + ad_location.width // 2, ad_location.top + ad_location.height // 2)
                for ad_image in ads_images if (ad_location := find_image(ad_image, confidence=0.8))]

                # for ad_image in ads_images: #! optional
                #     ad_location = find_image(ad_image, confidence=0.8)
                #     if ad_location:
                #         click(window, ad_location.left, ad_location.top) 

                # [click(window, ad_location.left, ad_location.top) for ad_image in ads_images if (ad_location := find_image(ad_image, confidence=0.8))]

                # click the middle part of the ads
                # [click(window, ad_location.left + ad_location.width // 2, ad_location.top + ad_location.height // 2) #! optional
                # for ad_image in ads_images if (ad_location := find_image(ad_image, confidence=0.8))]

                time.sleep(0.05)
        except KeyboardInterrupt: print("Other items thread stopped by user.")

    if event_light_thread and event_light_thread.is_alive():
        stop_thread_event = True
        event_light_thread.join()
        Event_w_Ads_BT.config(text="AdsEV", bg="#ce5129", fg="#000000")
    else:
        stop_thread_event = False
        window = focus_window(window_title)
        if not window:
            print(f"Window '{window_title}' not found.")
            return
        event_light_thread = threading.Thread(target=event_items_handler, args=(window,))
        event_light_thread.daemon = True
        event_light_thread.start()
        Event_w_Ads_BT.config(text="AdsEV", bg="#1d2027", fg="#fc0000")

Event_w_Ads_BT = Button( ROOT, text="AdsEV", bg="#ce5129", fg="#000000", width=5, height=0, command=event_function_Ads, font=("Jetbrainsmono nfp", 10, "bold"), relief="flat" )
Event_w_Ads_BT.pack(side="left", padx=(1, 1), pady=(1, 1))




#* ███████╗██╗   ██╗███████╗███╗   ██╗████████╗
#* ██╔════╝██║   ██║██╔════╝████╗  ██║╚══██╔══╝
#* █████╗  ██║   ██║█████╗  ██╔██╗ ██║   ██║
#* ██╔══╝  ╚██╗ ██╔╝██╔══╝  ██║╚██╗██║   ██║
#* ███████╗ ╚████╔╝ ███████╗██║ ╚████║   ██║
#* ╚══════╝  ╚═══╝  ╚══════╝╚═╝  ╚═══╝   ╚═╝
                    # if find_image(Home, confidence=0.8): press_ldplayer_screen_with_delays(window, (1265, 351, 2))

                    # elif any(find_image(image) for image in continueF): press_key(window, 'c')
                    # elif any(find_image(image) for image in continueF): press_keys_with_delays(window, 'c', 2)
                    
                    # elif any(find_image(image) for image in continueF): press_keys_with_delays(window, 'c', 1)
                    # elif find_image(Error_Processing_Video, confidence=0.8): press_key(window, 'esc') #! optional
                    # elif find_image(Click_Ads, confidence=0.95): press_keys_with_delays(window, '3', 1) #! optional
                    
                    # elif any(find_image(image, confidence=0.95) for image in continueF): press_keys_with_delays(window, 'c', 1)
					
                    # # for ck fighkt
                    # elif find_image(r"C:\msBackups\shadowfight3\temporary\to_battle.png", confidence=0.8): press_keys_with_delays(window, ' ', 2,)
                    # elif find_image(r"C:\msBackups\shadowfight3\temporary\fightttt.png", confidence=0.8, region=(1286, 831, 1713, 942)): press_keys_with_delays(window, 'c', 2,)
                    # elif find_image(r"C:\msBackups\shadowfight3\temporary\Claim.png", confidence=0.8): press_keys_with_delays(window, 'c', 2,)
            
                    # # elif find_image(Select_CreepyParty, confidence=0.8): press_keys_with_delays(window, 'y', 1) #! optional
                    # elif find_image(Select_SelectOption, confidence=0.8, region=(385, 622, 816, 753 )): press_keys_with_delays(window, '2', 1) #! optional
                    # elif find_image(skip, confidence=0.8): press_keys_with_delays(window, ' ', 1) #! optional

                    # elif find_image(back_battlepass, confidence=0.8): press_keys_with_delays(window, 'b', 1)
                    # elif find_image(back_GPlay, confidence=0.8): press_ldplayer_screen_with_delays(window, (1628, 815, 2)) #! optional

                    # elif any(find_image(image, confidence=actionF[image], region=Action_region) for image in actionF): press_keys_with_delays(window, 'q', 1, '0', 1, "m", 0) #! optional

                    # for ad_image in ads_images: #! optional
                    #     ad_location = find_image(ad_image, confidence=0.8)
                    #     if ad_location:
                    #         click(window, ad_location.left, ad_location.top) 

                    # [click(window, ad_location.left, ad_location.top) for ad_image in ads_images if (ad_location := find_image(ad_image, confidence=0.8))]

                    # click the middle part of the ads
                    # [click(window, ad_location.left + ad_location.width // 2, ad_location.top + ad_location.height // 2) #! optional
                    # for ad_image in ads_images if (ad_location := find_image(ad_image, confidence=0.8))]

                    # [click(window, ad_location.left + ad_location.width // 2, ad_location.top + ad_location.height // 2)
                    # for ad_image in ads_images if (ad_location := find_image(ad_image, confidence=0.8))]

                    # # Check if the no_currency image is found
                    # elif any(find_image(image) for image in notifyF):
                    #     subprocess.run(['python', r'C:\Users\nahid\ms\ms1\SH3\whatsapp.py'])
                    #     time.sleep(60)

                    # # Check if the no_currency image is found
                    # elif find_image(r'C:\msBackups\shadowfight3\notify\no_currency.png', confidence=0.8):
                    #     # Run the whatsapp.py script
                    #     subprocess.run(['python', r'C:\Users\nahid\ms\ms1\SH3\whatsapp.py'])
                    #     # Wait for 1 minute
                    #     time.sleep(60)
					
					
					
#? ██████╗  █████╗ ██╗██████╗ ███████╗
#? ██╔══██╗██╔══██╗██║██╔══██╗██╔════╝
#? ██████╔╝███████║██║██║  ██║███████╗
#? ██╔══██╗██╔══██║██║██║  ██║╚════██║
#? ██║  ██║██║  ██║██║██████╔╝███████║
#? ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═════╝ ╚══════╝

            # elif any(find_image(image) for image in notifyF):
            #     subprocess.run(['python', r'C:\Users\nahid\ms\ms1\SH3\whatsapp.py'])
            #     time.sleep(60)