package main

import (
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"
)

type StartupItem struct {
	Name    string `json:"name"`
	Command string `json:"command"`
	Enabled bool   `json:"enabled"`
}

type StartupManager struct {
	jsonFile string
	ps1File  string
	items    []StartupItem
}

func NewStartupManager() *StartupManager {
	homeDir, _ := os.UserHomeDir()
	return &StartupManager{
		jsonFile: filepath.Join(".", "startup_items.json"),
		ps1File:  filepath.Join(homeDir, "Desktop", "myStartup.ps1"),
	}
}

func (sm *StartupManager) loadItems() error {
	data, err := ioutil.ReadFile(sm.jsonFile)
	if err != nil {
		if os.IsNotExist(err) {
			sm.items = []StartupItem{}
			return nil
		}
		return err
	}
	
	return json.Unmarshal(data, &sm.items)
}

func (sm *StartupManager) saveItems() error {
	data, err := json.MarshalIndent(sm.items, "", "  ")
	if err != nil {
		return err
	}
	return ioutil.WriteFile(sm.jsonFile, data, 0644)
}

func (sm *StartupManager) generatePowerShellScript() error {
	var enabledItems []StartupItem
	for _, item := range sm.items {
		if item.Enabled {
			enabledItems = append(enabledItems, item)
		}
	}
	
	script := `# Auto-generated startup script
# Generated by Startup Manager (Go Web Edition)
Write-Host "Starting up applications..." -ForegroundColor Green

`
	
	for _, item := range enabledItems {
		if strings.TrimSpace(item.Command) != "" {
			script += fmt.Sprintf("# %s\n", item.Name)
			script += "try {\n"
			script += fmt.Sprintf("    Write-Host \"Executing %s...\" -ForegroundColor Yellow\n", item.Name)
			script += fmt.Sprintf("    %s\n", item.Command)
			script += fmt.Sprintf("    Write-Host \"%s executed successfully\" -ForegroundColor Green\n", item.Name)
			script += "} catch {\n"
			script += fmt.Sprintf("    Write-Host \"Failed to execute %s: $_\" -ForegroundColor Red\n", item.Name)
			script += "}\n\n"
		}
	}
	
	script += "Write-Host \"Startup complete!\" -ForegroundColor Green\n"
	
	return ioutil.WriteFile(sm.ps1File, []byte(script), 0644)
}

func (sm *StartupManager) indexHandler(w http.ResponseWriter, r *http.Request) {
	sm.loadItems()
	
	// Sort items by name
	sort.Slice(sm.items, func(i, j int) bool {
		return strings.ToLower(sm.items[i].Name) < strings.ToLower(sm.items[j].Name)
	})
	
	enabledCount := 0
	for _, item := range sm.items {
		if item.Enabled {
			enabledCount++
		}
	}
	
	data := struct {
		Items        []StartupItem
		EnabledCount int
		TotalCount   int
		PS1File      string
	}{
		Items:        sm.items,
		EnabledCount: enabledCount,
		TotalCount:   len(sm.items),
		PS1File:      sm.ps1File,
	}
	
	tmpl := `<!DOCTYPE html>
<html>
<head>
    <title>Startup Manager - Go Web Edition</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: #1e1e2e; 
            color: #cdd6f4; 
            line-height: 1.6;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #89b4fa; font-size: 2.5em; margin-bottom: 10px; }
        .header p { color: #bac2de; font-size: 1.1em; }
        .stats { 
            background: #313244; 
            padding: 15px; 
            border-radius: 8px; 
            margin-bottom: 20px; 
            text-align: center;
        }
        .controls { 
            display: flex; 
            gap: 10px; 
            margin-bottom: 20px; 
            flex-wrap: wrap;
        }
        .btn { 
            padding: 10px 20px; 
            border: none; 
            border-radius: 6px; 
            cursor: pointer; 
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s;
        }
        .btn-primary { background: #89b4fa; color: #1e1e2e; }
        .btn-primary:hover { background: #a3c7ff; }
        .btn-success { background: #a6e3a1; color: #1e1e2e; }
        .btn-success:hover { background: #b6f3b1; }
        .btn-warning { background: #f9e2af; color: #1e1e2e; }
        .btn-warning:hover { background: #fff2bf; }
        .btn-danger { background: #f38ba8; color: #1e1e2e; }
        .btn-danger:hover { background: #ff9bb5; }
        .btn-secondary { background: #6c7086; color: #cdd6f4; }
        .btn-secondary:hover { background: #7c7f93; }
        .search-box { 
            flex: 1; 
            padding: 10px; 
            border: 1px solid #45475a; 
            border-radius: 6px; 
            background: #313244; 
            color: #cdd6f4;
            font-size: 14px;
        }
        .items-grid { 
            display: grid; 
            gap: 15px; 
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        }
        .item-card { 
            background: #313244; 
            border: 1px solid #45475a; 
            border-radius: 8px; 
            padding: 20px;
            transition: all 0.3s;
        }
        .item-card:hover { border-color: #89b4fa; }
        .item-header { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            margin-bottom: 15px;
        }
        .item-name { 
            font-size: 1.2em; 
            font-weight: bold; 
            color: #cdd6f4;
        }
        .item-status { 
            padding: 4px 12px; 
            border-radius: 20px; 
            font-size: 0.8em; 
            font-weight: bold;
        }
        .status-enabled { background: #a6e3a1; color: #1e1e2e; }
        .status-disabled { background: #f38ba8; color: #1e1e2e; }
        .item-command { 
            background: #1e1e2e; 
            padding: 10px; 
            border-radius: 4px; 
            font-family: 'Consolas', monospace; 
            font-size: 0.9em; 
            word-break: break-all;
            margin-bottom: 15px;
            color: #a6e3a1;
        }
        .item-actions { 
            display: flex; 
            gap: 8px; 
            flex-wrap: wrap;
        }
        .item-actions .btn { padding: 6px 12px; font-size: 0.9em; }
        .form-container { 
            background: #313244; 
            padding: 30px; 
            border-radius: 8px; 
            margin-bottom: 20px;
        }
        .form-group { margin-bottom: 20px; }
        .form-group label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: bold; 
            color: #cdd6f4;
        }
        .form-group input, .form-group textarea { 
            width: 100%; 
            padding: 12px; 
            border: 1px solid #45475a; 
            border-radius: 6px; 
            background: #1e1e2e; 
            color: #cdd6f4; 
            font-size: 14px;
        }
        .form-group textarea { 
            height: 100px; 
            resize: vertical; 
            font-family: 'Consolas', monospace;
        }
        .toggle-switch { 
            position: relative; 
            display: inline-block; 
            width: 60px; 
            height: 34px;
        }
        .toggle-switch input { 
            opacity: 0; 
            width: 0; 
            height: 0;
        }
        .slider { 
            position: absolute; 
            cursor: pointer; 
            top: 0; 
            left: 0; 
            right: 0; 
            bottom: 0; 
            background-color: #f38ba8; 
            transition: .4s; 
            border-radius: 34px;
        }
        .slider:before { 
            position: absolute; 
            content: ""; 
            height: 26px; 
            width: 26px; 
            left: 4px; 
            bottom: 4px; 
            background-color: white; 
            transition: .4s; 
            border-radius: 50%;
        }
        input:checked + .slider { background-color: #a6e3a1; }
        input:checked + .slider:before { transform: translateX(26px); }
        @media (max-width: 768px) {
            .items-grid { grid-template-columns: 1fr; }
            .controls { flex-direction: column; }
            .item-actions { justify-content: center; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Startup Manager</h1>
            <p>Go Web Edition - Manage your Windows startup items</p>
        </div>
        
        <div class="stats">
            <strong>{{.EnabledCount}}/{{.TotalCount}} items enabled</strong> | 
            PowerShell Script: <code>{{.PS1File}}</code>
        </div>
        
        <div class="controls">
            <a href="/add" class="btn btn-primary">➕ Add Item</a>
            <a href="/" class="btn btn-secondary">🔄 Refresh</a>
            <a href="/generate" class="btn btn-success">📄 Generate Script</a>
            <input type="text" class="search-box" placeholder="🔍 Search items..." id="searchBox" onkeyup="filterItems()">
        </div>
        
        <div class="items-grid" id="itemsGrid">
            {{range .Items}}
            <div class="item-card" data-name="{{.Name}}" data-command="{{.Command}}">
                <div class="item-header">
                    <div class="item-name">{{.Name}}</div>
                    <div class="item-status {{if .Enabled}}status-enabled{{else}}status-disabled{{end}}">
                        {{if .Enabled}}✓ Enabled{{else}}✗ Disabled{{end}}
                    </div>
                </div>
                <div class="item-command">{{.Command}}</div>
                <div class="item-actions">
                    <form method="POST" action="/toggle" style="display: inline;">
                        <input type="hidden" name="name" value="{{.Name}}">
                        <button type="submit" class="btn {{if .Enabled}}btn-warning{{else}}btn-success{{end}}">
                            {{if .Enabled}}⏸️ Disable{{else}}▶️ Enable{{end}}
                        </button>
                    </form>
                    <form method="POST" action="/launch" style="display: inline;">
                        <input type="hidden" name="name" value="{{.Name}}">
                        <button type="submit" class="btn btn-primary">🚀 Launch</button>
                    </form>
                    <a href="/edit?name={{.Name}}" class="btn btn-secondary">✏️ Edit</a>
                    <form method="POST" action="/delete" style="display: inline;" onsubmit="return confirm('Delete {{.Name}}?')">
                        <input type="hidden" name="name" value="{{.Name}}">
                        <button type="submit" class="btn btn-danger">🗑️ Delete</button>
                    </form>
                </div>
            </div>
            {{end}}
        </div>
        
        {{if eq (len .Items) 0}}
        <div style="text-align: center; padding: 60px; color: #6c7086;">
            <h2>No startup items found</h2>
            <p>Click "Add Item" to create your first startup item</p>
        </div>
        {{end}}
    </div>
    
    <script>
        function filterItems() {
            const searchText = document.getElementById('searchBox').value.toLowerCase();
            const items = document.querySelectorAll('.item-card');
            
            items.forEach(item => {
                const name = item.dataset.name.toLowerCase();
                const command = item.dataset.command.toLowerCase();
                
                if (name.includes(searchText) || command.includes(searchText)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }
    </script>
</body>
</html>`
	
	t, _ := template.New("index").Parse(tmpl)
	t.Execute(w, data)
}

func (sm *StartupManager) addHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		name := strings.TrimSpace(r.FormValue("name"))
		command := strings.TrimSpace(r.FormValue("command"))
		
		if name == "" || command == "" {
			http.Error(w, "Name and command are required", http.StatusBadRequest)
			return
		}
		
		sm.loadItems()
		
		// Check for duplicate names
		for _, item := range sm.items {
			if item.Name == name {
				http.Error(w, "Item with this name already exists", http.StatusBadRequest)
				return
			}
		}
		
		sm.items = append(sm.items, StartupItem{
			Name:    name,
			Command: command,
			Enabled: false,
		})
		
		sm.saveItems()
		sm.generatePowerShellScript()
		
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
	
	tmpl := `<!DOCTYPE html>
<html>
<head>
    <title>Add Item - Startup Manager</title>
    <meta charset="UTF-8">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: #1e1e2e; 
            color: #cdd6f4; 
            line-height: 1.6;
        }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #89b4fa; font-size: 2em; }
        .form-container { 
            background: #313244; 
            padding: 30px; 
            border-radius: 8px; 
            margin-bottom: 20px;
        }
        .form-group { margin-bottom: 20px; }
        .form-group label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: bold; 
            color: #cdd6f4;
        }
        .form-group input, .form-group textarea { 
            width: 100%; 
            padding: 12px; 
            border: 1px solid #45475a; 
            border-radius: 6px; 
            background: #1e1e2e; 
            color: #cdd6f4; 
            font-size: 14px;
        }
        .form-group textarea { 
            height: 120px; 
            resize: vertical; 
            font-family: 'Consolas', monospace;
        }
        .btn { 
            padding: 12px 24px; 
            border: none; 
            border-radius: 6px; 
            cursor: pointer; 
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
            margin-right: 10px;
        }
        .btn-primary { background: #89b4fa; color: #1e1e2e; }
        .btn-secondary { background: #6c7086; color: #cdd6f4; }
        .examples { 
            background: #1e1e2e; 
            padding: 15px; 
            border-radius: 6px; 
            margin-top: 10px;
            font-family: 'Consolas', monospace;
            font-size: 0.9em;
        }
        .examples h4 { color: #f9e2af; margin-bottom: 10px; }
        .examples div { margin-bottom: 5px; color: #a6e3a1; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>➕ Add New Item</h1>
        </div>
        
        <div class="form-container">
            <form method="POST">
                <div class="form-group">
                    <label for="name">Item Name:</label>
                    <input type="text" id="name" name="name" required placeholder="e.g., Notepad, My Script">
                </div>
                
                <div class="form-group">
                    <label for="command">PowerShell Command:</label>
                    <textarea id="command" name="command" required placeholder="Enter PowerShell command..."></textarea>
                    <div class="examples">
                        <h4>Examples:</h4>
                        <div>Start-Process "notepad.exe"</div>
                        <div>Start-Process -FilePath "C:\Program Files\App\app.exe" -ArgumentList "/silent"</div>
                        <div>python "C:\path\to\script.py"</div>
                        <div>& "C:\tools\mytool.exe"</div>
                    </div>
                </div>
                
                <button type="submit" class="btn btn-primary">💾 Save Item</button>
                <a href="/" class="btn btn-secondary">❌ Cancel</a>
            </form>
        </div>
    </div>
</body>
</html>`
	
	w.Header().Set("Content-Type", "text/html")
	w.Write([]byte(tmpl))
}

func (sm *StartupManager) editHandler(w http.ResponseWriter, r *http.Request) {
	name := r.URL.Query().Get("name")
	if name == "" {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
	
	sm.loadItems()
	
	var item *StartupItem
	for i := range sm.items {
		if sm.items[i].Name == name {
			item = &sm.items[i]
			break
		}
	}
	
	if item == nil {
		http.Error(w, "Item not found", http.StatusNotFound)
		return
	}
	
	if r.Method == "POST" {
		newName := strings.TrimSpace(r.FormValue("name"))
		command := strings.TrimSpace(r.FormValue("command"))
		
		if newName == "" || command == "" {
			http.Error(w, "Name and command are required", http.StatusBadRequest)
			return
		}
		
		// Check for duplicate names (except current item)
		for _, existing := range sm.items {
			if existing.Name == newName && existing.Name != name {
				http.Error(w, "Item with this name already exists", http.StatusBadRequest)
				return
			}
		}
		
		item.Name = newName
		item.Command = command
		
		sm.saveItems()
		sm.generatePowerShellScript()
		
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
	
	tmpl := `<!DOCTYPE html>
<html>
<head>
    <title>Edit Item - Startup Manager</title>
    <meta charset="UTF-8">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: #1e1e2e; 
            color: #cdd6f4; 
            line-height: 1.6;
        }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #89b4fa; font-size: 2em; }
        .form-container { 
            background: #313244; 
            padding: 30px; 
            border-radius: 8px; 
            margin-bottom: 20px;
        }
        .form-group { margin-bottom: 20px; }
        .form-group label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: bold; 
            color: #cdd6f4;
        }
        .form-group input, .form-group textarea { 
            width: 100%; 
            padding: 12px; 
            border: 1px solid #45475a; 
            border-radius: 6px; 
            background: #1e1e2e; 
            color: #cdd6f4; 
            font-size: 14px;
        }
        .form-group textarea { 
            height: 120px; 
            resize: vertical; 
            font-family: 'Consolas', monospace;
        }
        .btn { 
            padding: 12px 24px; 
            border: none; 
            border-radius: 6px; 
            cursor: pointer; 
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
            margin-right: 10px;
        }
        .btn-primary { background: #89b4fa; color: #1e1e2e; }
        .btn-secondary { background: #6c7086; color: #cdd6f4; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>✏️ Edit Item</h1>
        </div>
        
        <div class="form-container">
            <form method="POST">
                <div class="form-group">
                    <label for="name">Item Name:</label>
                    <input type="text" id="name" name="name" required value="{{.Name}}">
                </div>
                
                <div class="form-group">
                    <label for="command">PowerShell Command:</label>
                    <textarea id="command" name="command" required>{{.Command}}</textarea>
                </div>
                
                <button type="submit" class="btn btn-primary">💾 Update Item</button>
                <a href="/" class="btn btn-secondary">❌ Cancel</a>
            </form>
        </div>
    </div>
</body>
</html>`
	
	t, _ := template.New("edit").Parse(tmpl)
	t.Execute(w, item)
}

func (sm *StartupManager) toggleHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
	
	name := r.FormValue("name")
	sm.loadItems()
	
	for i := range sm.items {
		if sm.items[i].Name == name {
			sm.items[i].Enabled = !sm.items[i].Enabled
			break
		}
	}
	
	sm.saveItems()
	sm.generatePowerShellScript()
	
	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func (sm *StartupManager) launchHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
	
	name := r.FormValue("name")
	sm.loadItems()
	
	var item *StartupItem
	for i := range sm.items {
		if sm.items[i].Name == name {
			item = &sm.items[i]
			break
		}
	}
	
	if item == nil || strings.TrimSpace(item.Command) == "" {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
	
	go func() {
		cmd := exec.Command("powershell", "-Command", item.Command)
		cmd.Run()
	}()
	
	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func (sm *StartupManager) deleteHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
	
	name := r.FormValue("name")
	sm.loadItems()
	
	for i, item := range sm.items {
		if item.Name == name {
			sm.items = append(sm.items[:i], sm.items[i+1:]...)
			break
		}
	}
	
	sm.saveItems()
	sm.generatePowerShellScript()
	
	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func (sm *StartupManager) generateHandler(w http.ResponseWriter, r *http.Request) {
	sm.loadItems()
	sm.generatePowerShellScript()
	
	w.Header().Set("Content-Type", "text/plain")
	w.Write([]byte("PowerShell script generated successfully at: " + sm.ps1File))
}

func main() {
	sm := NewStartupManager()
	
	http.HandleFunc("/", sm.indexHandler)
	http.HandleFunc("/add", sm.addHandler)
	http.HandleFunc("/edit", sm.editHandler)
	http.HandleFunc("/toggle", sm.toggleHandler)
	http.HandleFunc("/launch", sm.launchHandler)
	http.HandleFunc("/delete", sm.deleteHandler)
	http.HandleFunc("/generate", sm.generateHandler)
	
	port := "8090"
	fmt.Printf("🚀 Startup Manager running at http://localhost:%s\n", port)
	fmt.Println("📁 JSON file:", sm.jsonFile)
	fmt.Println("📄 PS1 file:", sm.ps1File)
	fmt.Println("\nPress Ctrl+C to stop")
	
	// Try to open browser
	go func() {
		exec.Command("cmd", "/c", "start", "http://localhost:"+port).Run()
	}()
	
	log.Fatal(http.ListenAndServe(":"+port, nil))
}