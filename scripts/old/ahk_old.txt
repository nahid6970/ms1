


; PSS
; #IfWinActive ahk_exe dnplayer.exe
;     F13::
;         Send, {x down}j
;         Send, {l down}j
;         Send, {i down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Send, {i up}
;         Send, {l up}
;         Send, {x up}
;     return
; #If

; #IfWinActive ahk_exe dnplayer.exe
;     F13::
;         Send, {i down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Send, {i up}
;     return
; #If


; #Persistent
; SetTitleMatchMode, 2  ; This will match any window title containing the specified text.

; ; Hook into the Win+E key combination for opening File Explorer
; #e::
;     ; Check if an Explorer window already exists
;     IfWinExist, ahk_class CabinetWClass
;     {
;         ; Activate the existing window and send the hotkey to open a new tab
;         WinActivate
;         Send, ^t  ; This sends Ctrl + T to open a new tab
;     }
;     else
;     {
;         ; If no window exists, open File Explorer normally
;         Run, explorer.exe
;     }
;     return











    ; Action for F13 key
; F13::
; MsgBox, You pressed F13!
; return
; F14::
; MsgBox, You pressed F14!
; return
; ; Action for F14 key
; F15::
; MsgBox, You pressed F15!
; return
; F16::
; MsgBox, You pressed F16!
; return
; F17::
; MsgBox, You pressed F17!
; return




; Light-Attack1
; #IfWinActive ahk_exe dnplayer.exe
;     F13::
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x up}
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x down}
;         Send, {d down}
;         Send, j
;         Send, j
;         Send, {d up}
;         Sleep, 100
;         ; Send, {x up}
;     return
; #If



;! continue untile f14 pressed // not sure if runs multiple instance??
; #IfWinActive ahk_exe dnplayer.exe
;     F13::
;         Toggle := !Toggle  ; Toggle the loop on/off
;         while (Toggle)  ; Loop while Toggle is true
;         {
;             if !WinActive("ahk_exe dnplayer.exe")  ; Check if dnplayer.exe is still active
;             {
;                 Toggle := false
;                 break
;             }
;             Send, {d down}
;             Send, j
;             Send, j
;             Send, {d up}
;             Sleep, 100  ; Adjust the delay as needed
;         }
;     return

;     F9::
;         Toggle := false  ; Stop the loop when F9 is pressed
;     return
; #If

; ;! continue untile f14 pressed
; #IfWinActive ahk_exe dnplayer.exe
;     F13::
;         if (Toggle)  ; If the loop is already running, do nothing
;             return
;         Toggle := true  ; Start the loop
;         while (Toggle)  ; Loop while Toggle is true
;         {
;             if !WinActive("ahk_exe dnplayer.exe")  ; Check if dnplayer.exe is still active
;             {
;                 Toggle := false
;                 break
;             }
;             Send, {x down}
;             Send, {d down}
;             Send, j
;             Send, j
;             Send, {d up}
;             Send, {x up}
;             Sleep, 100  ; Adjust the delay as needed
;         }
;     return

;     F9::
;         Toggle := false  ; Stop the loop when F9 is pressed
;     return
; #If



; ;; only send the shortcut to dnplayer
; #IfWinActive ahk_exe dnplayer.exe
;     F13::
;         StartTime := A_TickCount  ; Record the current time
;         while (A_TickCount - StartTime < 5000)  ; Run for 3000 milliseconds (3 seconds)
;         {
;             ; Send, {l down}
;             Send, {x down}
;             Send, {d down}
;             Send, j
;             Send, j
;             Send, {d up}
;             Send, {x up}
;             ; Send, {l up}
;             Sleep, 100  ; Adjust the delay as needed between iterations
;         }
;     return
; #If








;  ██████╗██╗  ██╗ ██████╗ ██████╗ ██████╗
; ██╔════╝██║  ██║██╔═══██╗██╔══██╗██╔══██╗
; ██║     ███████║██║   ██║██████╔╝██║  ██║
; ██║     ██╔══██║██║   ██║██╔══██╗██║  ██║
; ╚██████╗██║  ██║╚██████╔╝██║  ██║██████╔╝
;  ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝

; ChordSequence := ""
; TimerActive := False

; ; First keypress in the chord sequence
; ^f::  ; Ctrl + F
;     ChordSequence := "Ctrl+F"
;     TimerActive := True
;     SetTimer, CheckChordTimeout, -500  ; Timer to reset the chord sequence if not completed in 500ms
;     return

; ; Second keypress in the chord sequence for Explorer
; ^e::  ; Ctrl + E
;     if (ChordSequence = "Ctrl+F" && GetKeyState("Ctrl", "P")) {
;         ChordSequence := ""  ; Clear the sequence after successful match
;         TimerActive := False
;         ; Launch Windows Explorer
;         Run, explorer.exe
;     }
;     return

; ; Second keypress in the chord sequence for Terminal
; ^d::  ; Ctrl + D
;     if (ChordSequence = "Ctrl+F" && GetKeyState("Ctrl", "P")) {
;         ChordSequence := ""  ; Clear the sequence after successful match
;         TimerActive := False
;         ; Launch Windows Terminal
;         Run, wt.exe  ; Adjust path if needed
;     }
;     return

; ; Regular Ctrl + D functionality
; ^d up::  ; Ctrl + D released
;     if !(ChordSequence = "Ctrl+F") {
;         ; Perform normal Ctrl + D action here
;         Send, ^d
;     }
;     return

; ; Regular Ctrl + E functionality
; ^e up::  ; Ctrl + E released
;     if !(ChordSequence = "Ctrl+F") {
;         ; Perform normal Ctrl + E action here
;         Send, ^e
;     }
;     return

; ; Timer expirfation handler for timeout
; CheckChordTimeout:
;     if (ChordSequence = "Ctrl+F" && TimerActive) {
;         ; Send Ctrl+F if Ctrl+E or Ctrl+D is not pressed within 500ms
;         Send, ^f
;     }
;     ChordSequence := ""  ; Reset the sequence after handling timeout
;     TimerActive := False
;     return

; ; Ensure Ctrl is released if script is terminated or reset
; ^Esc::  ; Ctrl + Esc to exit the script
;     ExitApp






#=:: ; [Win]+[=]
    WinGet, window, ID, A
    InputBox, width, Resize, Width:, , 140, 130
    InputBox, height, Resize, Height:, , 140, 130
    WinMove, ahk_id %window%, , , , width, height
    return






#Persistent
#SingleInstance Force

; Assign Shift + Del to delete folder after killing the locking process
+Del::
    ; Get the selected folder or file
    selectedPath := GetSelectedPath()
    
    if (selectedPath) {
        ; Check which process is using the folder/file
        processList := GetLockingProcess(selectedPath)
        
        if (processList) {
            ; Kill all processes locking the folder
            Loop, Parse, processList, `n
            {
                Process, Close, %A_LoopField%
            }
        }
        
        ; After killing the process, delete the folder
        FileRemoveDir, %selectedPath%, 1 ; 1 means to delete non-empty folder
    } else {
        MsgBox, No folder or file is selected!
    }
return

; Function to get selected file or folder path
GetSelectedPath() {
    ; This retrieves the currently selected file or folder in File Explorer
    filePath := ""
    ClipSaved := ClipboardAll
    Clipboard := ""
    
    Send, ^c
    ClipWait, 1
    
    filePath := Clipboard
    Clipboard := ClipSaved
    
    return filePath
}

; Function to get the list of processes locking a file/folder
GetLockingProcess(path) {
    ; Uses PowerShell to get the process locking the file/folder
    cmd := "Get-Process | Where-Object { $_.Modules -match '" path "' } | ForEach-Object { $_.Name }"
    
    runCmd := ComObjCreate("WScript.Shell").Exec("powershell.exe -Command " cmd)
    
    output := ""
    while !runCmd.StdOut.AtEndOfStream {
        output := runCmd.StdOut.ReadAll()
    }
    
    return output
}









; !h:: ; Define the shortcut Ctrl+H
; Gui, New, +Resize ; Create a new GUI window with resize capability

; ; Use Font command to set a specific font size and style for all text controls
; Gui, Font, s10 Bold, Jetbrainsmono nfp ; Set font size to 12, make it bold, and use Arial

; ; Add text controls to the GUI
; Gui, Add, Text, x10 y10 w120 h40 +Center, Button
; Gui, Add, Text, x10 y60 w120 h40 +Center, Button
; Gui, Add, Text, x10 y110 w120 h40 +Center, Button
; Gui, Add, Text, x10 y160 w120 h40 +Center, Button
; Gui, Add, Text, x10 y210 w120 h40 +Center, Button

; Gui, Add, Text, x150 y10 w120 h40 +Center, Button
; Gui, Add, Text, x150 y60 w120 h40 +Center, Button
; Gui, Add, Text, x150 y110 w120 h40 +Center, Button
; Gui, Add, Text, x150 y160 w120 h40 +Center, Button

; Gui, Show, w300 h300, Two Column GUI ; Show the GUI with a width and height
; return

; GuiClose:
; Gui, Hide ; Hide the GUI instead of exiting the script
; return




; !h:: ; Define the shortcut Ctrl+H
; Gui, New, +Resize ; Create a new GUI window with resize capability

; ; First column
; Gui, Font, s12 Bold, Jetbrainsmono nfp
; Gui, Add, Text, x10 y10 w300 h40 +Center,  ShowActionChooser`nALT+F
; Gui, Add, Text, x10 y60 w300 h40 +Center, Button 2
; Gui, Add, Text, x10 y110 w300 h40 +Center, Button 3
; Gui, Add, Text, x10 y160 w300 h40 +Center, Button 4
; Gui, Add, Text, x10 y210 w300 h40 +Center, Button 5

; ; Second column
; Gui, Font, s12 Italic, Times New Roman
; Gui, Add, Text, x310 y10 w300 h40 +Center, Button A
; Gui, Add, Text, x310 y60 w300 h40 +Center, Button B
; Gui, Add, Text, x310 y110 w300 h40 +Center, Button C
; Gui, Add, Text, x310 y160 w300 h40 +Center, Button D

; Gui, Show, w600 h300, Two Column GUI ; Show the GUI with a width and height
; return

; GuiClose:
; Gui, Hide ; Hide the GUI instead of exiting the script
; return













;* ██╗  ██╗ ██████╗ ███╗   ███╗ ██████╗ ██████╗ ███████╗██████╗ ██╗
;* ██║ ██╔╝██╔═══██╗████╗ ████║██╔═══██╗██╔══██╗██╔════╝██╔══██╗██║
;* █████╔╝ ██║   ██║██╔████╔██║██║   ██║██████╔╝█████╗  ██████╔╝██║
;* ██╔═██╗ ██║   ██║██║╚██╔╝██║██║   ██║██╔══██╗██╔══╝  ██╔══██╗██║
;* ██║  ██╗╚██████╔╝██║ ╚═╝ ██║╚██████╔╝██║  ██║███████╗██████╔╝██║
;* ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═════╝ ╚═╝
; Pause::
; Gui, New, +Resize
; Gui, +AlwaysOnTop
; Gui, Font, s25 Normal Bold, Jetbrainsmono nfp
; Gui, Add, Text, x010 y000 w300 h80 +Center cGreen, Komorebi
; ; start apps
; Gui,Font,s12 Normal Bold,Jetbrainsmono nfp
; Gui, Add, Button, x010 y050 w300 h50 gkomorebic_save ,Komorebic Save
; Gui, Add, Button, x010 y100 w300 h50 gkomorebic_load ,Komorebic Load

; Gui, Show, w320 h200, Komorebi
; return
; Gui, Hide
; return





;* ███████╗████████╗ █████╗ ██████╗ ████████╗     ██████╗ ██╗   ██╗██╗
;* ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗╚══██╔══╝    ██╔════╝ ██║   ██║██║
;* ███████╗   ██║   ███████║██████╔╝   ██║       ██║  ███╗██║   ██║██║
;* ╚════██║   ██║   ██╔══██║██╔══██╗   ██║       ██║   ██║██║   ██║██║
;* ███████║   ██║   ██║  ██║██║  ██║   ██║       ╚██████╔╝╚██████╔╝██║
;* ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝        ╚═════╝  ╚═════╝ ╚═╝

!s:: ; Define the shortcut Ctrl+H
Gui, New, +Resize ; Create a new GUI window with resize capability
Gui, +AlwaysOnTop
Gui, Font, s25 Normal Bold, Jetbrainsmono nfp
Gui, Add, Text, x010 y000 w300 h80 +Center cGreen, Start
; start apps
Gui,Font,s12 Normal Bold,Jetbrainsmono nfp
Gui, Add, Button, x010 y050 w150 h50                          ,Komorebic
Gui, Add, Button, x160 y050 w150 h50 gstart_Komorebic         ,Start


Gui, Add, Button, x010 y100 w300 h50 gstart_Explorer          ,Explorer
Gui, Add, Button, x010 y150 w300 h50 gstart_RunningAppsMonitor,RunningAppsMonitor
Gui, Add, Button, x010 y200 w300 h50 gstart_cmd_asAdmin       ,cmd [Admin]
Gui, Add, Button, x010 y250 w300 h50 gstart_Run               ,Run
Gui, Add, Button, x010 y300 w300 h50 gstart_mypygui           ,mypygui

Gui, Show, w600 h500, Apps (Start/Kill)
return
Gui, Hide
return




;! ██╗  ██╗██╗██╗     ██╗         ██████╗ ██╗   ██╗██╗
;! ██║ ██╔╝██║██║     ██║        ██╔════╝ ██║   ██║██║
;! █████╔╝ ██║██║     ██║        ██║  ███╗██║   ██║██║
;! ██╔═██╗ ██║██║     ██║        ██║   ██║██║   ██║██║
;! ██║  ██╗██║███████╗███████╗   ╚██████╔╝╚██████╔╝██║
;! ╚═╝  ╚═╝╚═╝╚══════╝╚══════╝    ╚═════╝  ╚═════╝ ╚═╝

!k:: ; Define the shortcut Ctrl+H
Gui, New, +Resize ; Create a new GUI window with resize capability
Gui, +AlwaysOnTop
Gui, Font, s25 Normal Bold, Jetbrainsmono nfp
Gui, Add, Text, x10 y000 w300 h80 +Center cRed, Kill
Gui,Font,s12 Normal Bold,Jetbrainsmono nfp
; kill apps
Gui, Add, Button, x10 y050 w300 h50 gKill_Python    ,Python
Gui, Add, Button, x10 y100 w300 h50 gKill_Komorebi  ,Komorebi
Gui, Add, Button, x10 y150 w300 h50 gKill_PWSH      ,PWSH
Gui, Add, Button, x10 y200 w300 h50 gKill_Powershell,Powershell
Gui, Add, Button, x10 y250 w300 h50 gKill_CMD       ,cmd

Gui, Show, w320 h500, Apps (Start/Kill)
return
Gui, Hide
return