{
    "script_shortcuts": [
        {
            "name": "Open Terminal Admin",
            "description": "Opens PowerShell as administrator",
            "hotkey": "!x",
            "action": "RunWait(\"pwsh -Command `\"cd $env:USERPROFILE; Start-Process pwsh -Verb RunAs`\"\", , \"Hide\")",
            "category": "Script",
            "enabled": false
        },
        {
            "name": "Run Python Script",
            "description": "Opens run.py in the ms1 directory",
            "hotkey": "ScrollLock",
            "action": "run_py_script()\nrun_py_script()\n{\n    Run(\"C:\\Users\\nahid\\ms\\ms1\\scripts\\run\\Run.py\", , \"Show\")\n    ; Wait a moment for the window to appear\n    Sleep(1000)\n    ; Make the window always on top (assumes it's the active window)\n    ;WinSetAlwaysOnTop(true, \"A\")\n}",
            "category": "Launch",
            "enabled": true
        },
        {
            "name": "Monitor Internal",
            "description": "Switch to internal monitor only",
            "hotkey": "RAlt & Numpad1",
            "action": "Run(\"C:\\Users\\nahid\\ms\\msBackups\\Display\\DisplaySwitch.exe /internal\", \"\", \"Hide\")",
            "category": "Launch"
        },
        {
            "name": "Monitor External",
            "description": "Switch to external monitor only",
            "hotkey": "RAlt & Numpad2",
            "action": "Run(\"C:\\Users\\nahid\\ms\\msBackups\\Display\\DisplaySwitch.exe /external\", \"\", \"Hide\")",
            "category": "Launch"
        },
        {
            "name": "Monitor Extend",
            "description": "Extend display to both monitors",
            "hotkey": "RAlt & Numpad3",
            "action": "Run(\"C:\\Users\\nahid\\ms\\msBackups\\Display\\DisplaySwitch.exe /extend\", \"\", \"Hide\")",
            "category": "Launch"
        },
        {
            "name": "Bio GUI",
            "description": "Opens Bio.ahk GUI",
            "hotkey": "!b",
            "action": "Run(\"C:\\Users\\nahid\\ms\\ms1\\scripts\\Autohtokey\\version2\\gui\\Bio.ahk\", \"\", \"Hide\")",
            "category": "Launch",
            "enabled": true
        },
        {
            "name": "Ultimate GUI",
            "description": "Opens Ultimate_Gui.py",
            "hotkey": "!u",
            "action": "Run(\"C:\\Users\\nahid\\ms\\ms1\\Ultimate_Gui.py\", \"\", \"Hide\")",
            "category": "Launch"
        },
        {
            "name": "Always On Top Toggle",
            "description": "Toggles always on top for active window",
            "hotkey": "#t",
            "action": "Always_on_Top()\nAlways_on_Top(){\n    static alwaysOnTop := false\n    if (alwaysOnTop) {\n        WinSetAlwaysOnTop(false, \"A\")\n    } else {\n        WinSetAlwaysOnTop(true, \"A\")\n    }\n    alwaysOnTop := !alwaysOnTop\n}",
            "category": "Script"
        },
        {
            "name": "Kill Foreground Process",
            "description": "Forcefully kills the process under mouse cursor",
            "hotkey": "!q",
            "action": "KillForeground()\nKillForeground() {\n    MouseGetPos(, , &WinID)\n    ProcessID := WinGetPID(\"ahk_id \" WinID)\n    Run(\"taskkill /f /pid \" ProcessID, , \"Hide\")\n}",
            "category": "Script"
        },
        {
            "name": "Copy Path",
            "description": "",
            "hotkey": "^!m",
            "action": "CopyPath_File()\nCopyPath_File() {\n    ClipboardBackup := ClipboardAll()\n    A_Clipboard := \"\" \n    Send(\"^c\")\n    Errorlevel := !ClipWait(1)\n    if ErrorLevel\n    {\n    MsgBox(\"No valid file path found.\")\n    }\n    else\n    {\n    ClipBoardContent := A_Clipboard\n    ; V1toV2: StrReplace() is not case sensitive\n    ; check for StringCaseSense in v1 source script\n    ; and change the CaseSense param in StrReplace() if necessary\n    ClipBoardContent := StrReplace(ClipBoardContent, \"`n\", \"`t\")\n    A_Clipboard := ClipboardBackup\n    A_Clipboard := ClipBoardContent\n    TrayTip(\"Copy as Path\", \"Copied `\"\" ClipBoardContent \"`\" to clipboard.\")\n    }}",
            "category": "Script"
        },
        {
            "name": "Kill (dnplayer/python/) + Change Display",
            "category": "Script",
            "description": "",
            "hotkey": "^!+r",
            "action": "{\n    ; Kill dnplayer.exe\n    Run(\"taskkill /F /IM dnplayer.exe\",,\"Hide\")\n    ; Kill python.exe\n    Run(\"taskkill /F /IM python.exe\",,\"Hide\")\n    ; Run the command\n    Run(\"C:\\Users\\nahid\\ms\\msBackups\\Display\\DisplaySwitch.exe /internal\",,\"Hide\")\n}"
        },
        {
            "name": "mypygui",
            "category": "Launch",
            "description": "",
            "hotkey": "#x",
            "action": "Run(\"C:\\Users\\nahid\\ms\\ms1\\mypygui.py\", , \"Hide\")"
        },
        {
            "name": "Startup Setup",
            "category": "Launch",
            "description": "",
            "hotkey": "#s",
            "action": "Run(\"C:\\Users\\nahid\\ms\\ms1\\scripts\\flask\\4999_startup\\startup.py\", , \"Hide\")"
        },
        {
            "name": "CrossHair",
            "category": "General",
            "description": "",
            "hotkey": "^+m",
            "action": "Run(\"C:\\Users\\nahid\\ms\\ms1\\scripts\\xy\\XY_CroosHair.py\", , \"Hide\")"
        },
        {
            "name": "Explorer Restart",
            "category": "Script",
            "description": "",
            "hotkey": "LAlt & e",
            "action": "Run('pwsh -c explorer.exe', , 'Hide')"
        },
        {
            "name": "Replace Space with _",
            "category": "Text",
            "description": "",
            "hotkey": "RAlt & Space",
            "action": "replacewith_()\nreplacewith_()\n{\n    ; Backup the clipboard\n    ClipboardBackup := ClipboardAll()\n    ; Clear the clipboard\n    A_Clipboard := \"\"\n    ; Copy the selected text\n    Send(\"^c\")\n    ; Wait for the clipboard to contain the copied text\n    if !ClipWait(1) {\n        MsgBox(\"No text selected or copying failed.\")\n    } else {\n        ; Get the clipboard content\n        ClipboardContent := A_Clipboard\n        ; Replace all spaces with underscores\n        ClipboardContent := StrReplace(ClipboardContent, A_Space, \"_\")\n        ; Put the modified text back in clipboard\n        A_Clipboard := ClipboardContent\n        ; Paste the modified text (this replaces the selected text)\n        Send(\"^v\")\n        ; Wait a moment for the paste to complete\n        Sleep(50)\n    }\n    ; Restore the original clipboard content\n    A_Clipboard := ClipboardBackup\n}"
        },
        {
            "name": "Replace - w Space",
            "category": "Text",
            "description": "",
            "hotkey": "RAlt & -",
            "action": "replacedashwithspace()\nreplacedashwithspace()\n{\n    ; Backup the clipboard\n    ClipboardBackup := ClipboardAll()\n    ; Clear the clipboard\n    A_Clipboard := \"\"\n    ; Copy the selected text\n    Send(\"^c\")\n    ; Wait for the clipboard to contain the copied text\n    if !ClipWait(1) {\n        MsgBox(\"No text selected or copying failed.\")\n    } else {\n        ; Get the clipboard content\n        ClipboardContent := A_Clipboard\n        ; Replace all dashes with spaces\n        ClipboardContent := StrReplace(ClipboardContent, \"-\", A_Space)\n        ; Put the modified text back in clipboard\n        A_Clipboard := ClipboardContent\n        ; Paste the modified text (this replaces the selected text)\n        Send(\"^v\")\n        ; Wait a moment for the paste to complete\n        Sleep(50)\n    }\n    ; Restore the original clipboard content\n    A_Clipboard := ClipboardBackup\n}"
        },
        {
            "name": "Send Apps to 2nd Display",
            "category": "Display",
            "description": "",
            "hotkey": "!1",
            "action": "Run(\"C:\\Users\\nahid\\ms\\ms1\\scripts\\Autohtokey\\version2\\display\\send_to_2nd.ahk\", \"\", \"Hide\")",
            "enabled": true
        },
        {
            "name": "Open w VScode",
            "category": "General",
            "description": "",
            "hotkey": "^!n",
            "action": "Run(\"C:\\Users\\nahid\\ms\\ms1\\scripts\\Autohtokey\\version1\\nvim_OpenWith.ahk\", \"\", \"Show\")",
            "enabled": false
        },
        {
            "name": "Center Apps Window",
            "category": "Display",
            "description": "",
            "hotkey": "LAlt & c",
            "action": "Center_Focused_Window()\nCenter_Focused_Window() {\n    ; Get the handle of the active (focused) window\n    hwnd := WinGetID(\"A\")\n    ; Get the position and size of the active window\n    WinGetPos(&x, &y, &w, &h, \"ahk_id \" hwnd)\n    ; Get the screen width and height\n    ScreenWidth := SysGet(78)\n    ScreenHeight := SysGet(79)\n    ; Calculate new position to center the window\n    newX := (ScreenWidth - w) / 2\n    newY := (ScreenHeight - h) / 2\n    ; Move the window to the calculated position\n    WinMove(newX, newY, , , \"ahk_id \" hwnd)\n}"
        },
        {
            "name": "Black Screen",
            "category": "Display",
            "description": "",
            "hotkey": "^!b",
            "action": "Toggle_Screen_Blackout()\n; Define a variable to track the state of the screen blackout\nToggle_Screen_Blackout() {\nblackoutState := 0\n; Define a global variable to store the Gui object\nmyGui := \"\"\n; Define a function to toggle the screen blackout\n    global blackoutState, myGui  ; Declare the variables as global so they can be accessed inside the function\n    if (blackoutState = 0) {\n        ; If the screen is not blacked out, create a black fullscreen window\n        blackoutState := 1\n        ; Create the black window to cover the entire screen\n        myGui := Gui()\n        myGui.Opt(\"+LastFound +AlwaysOnTop -Caption +ToolWindow\") ; Remove caption and border\n        myGui.BackColor := \"Black\"\n        myGui.Show(\"w\" . A_ScreenWidth . \" h\" . A_ScreenHeight . \" x0 y0 NoActivate\")\n    } else {\n        ; If the screen is already blacked out, close the window\n        blackoutState := 0\n        myGui.Destroy()\n        myGui := \"\"  ; Clear the myGui object\n    }\n}"
        },
        {
            "name": "White Screen",
            "category": "Display",
            "description": "",
            "hotkey": "^!w",
            "action": "Toggle_Screen_Whiteout()\n; Define a variable to track the state of the screen blackout\nToggle_Screen_Whiteout() {\nwhiteState := 0\n; Define a global variable to store the Gui object\nmyGui := \"\"\n; Define a function to toggle the screen blackout\n    global whiteState, myGui  ; Declare the variables as global so they can be accessed inside the function\n    if (whiteState = 0) {\n        ; If the screen is not blacked out, create a black fullscreen window\n        whiteState := 1\n        ; Create the black window to cover the entire screen\n        myGui := Gui()\n        myGui.Opt(\"+LastFound +AlwaysOnTop -Caption +ToolWindow\") ; Remove caption and border\n        myGui.BackColor := \"ffffff\"\n        myGui.Show(\"w\" . A_ScreenWidth . \" h\" . A_ScreenHeight . \" x0 y0 NoActivate\")\n    } else {\n        ; If the screen is already blacked out, close the window\n        whiteState := 0\n        myGui.Destroy()\n        myGui := \"\"  ; Clear the myGui object\n    }\n}"
        },
        {
            "name": "Execute Script W/O Closing",
            "category": "General",
            "description": "",
            "hotkey": "^!+Enter",
            "action": "{\n    ClipSaved := ClipboardAll()\n    A_Clipboard := \"\"               ; Clear clipboard\n    ; Get the active window title\n    ActiveTitle := WinGetTitle(\"A\")\n    ; If the active window is VSCode, simulate the shortcut to copy the file path\n    if InStr(ActiveTitle, \"Visual Studio Code\") {\n        ; Simulate VSCode's shortcut to copy the current file path (Shift + Alt + C)\n        Send(\"+!c\")\n        Errorlevel := !ClipWait(1)               ; Wait until clipboard has content\n    } else {\n        ; Send Ctrl+C to copy the selected file path in other environments\n        Send(\"^c\")\n        Errorlevel := !ClipWait(1)               ; Wait until clipboard has content\n    }\n    if (A_Clipboard != \"\") {\n        ; Get the selected file path from the clipboard\n        FilePath := A_Clipboard\n        Ext := SubStr(FilePath, (InStr(FilePath, \".\", 0, -1) + 1)<1 ? (InStr(FilePath, \".\", 0, -1) + 1)-1 : (InStr(FilePath, \".\", 0, -1) + 1))\n        ; Check the extension and run the appropriate command\n        if (Ext = \"py\") {\n            Run(\"cmd /k python `\"\" FilePath \"`\"\", , , &PID)\n        } else if (Ext = \"ps1\") {\n            Run(\"cmd /k powershell -ExecutionPolicy Bypass -File `\"\" FilePath \"`\"\", , , &PID)\n        } else if (Ext = \"bat\") {\n            Run(\"cmd /k `\"\" FilePath \"`\"\", , , &PID)\n        } else if (Ext = \"ahk\") {\n            Run(\"cmd /k `\"\" FilePath \"`\"\", , , &PID)\n        } else {\n            MsgBox(\"Unsupported file type: \" Ext)\n        }\n    } else {\n        MsgBox(\"No file path selected or copied.\")\n    }\n    ; Restore original clipboard content\n    A_Clipboard := ClipSaved\n    return\n}"
        },
        {
            "name": "Border",
            "category": "Text",
            "description": "",
            "hotkey": "^+b",
            "action": "AddSmartBorder()\nAddSmartBorder()\n{\n    ; Copy selected text\n    A_Clipboard := \"\"\n    Send(\"^c\")\n    ClipWait(1)\n    if !A_Clipboard {\n        MsgBox \"Nothing selected!\"\n        return\n    }\n    \n    ; Detect language/file type from window title\n    activeTitle := WinGetTitle(\"A\")\n    commentStyle := DetectCommentStyle(activeTitle)\n    \n    ; Split into lines and normalize tabs → spaces\n    rawLines := StrSplit(A_Clipboard, \"`n\", \"`r\")\n    maxLen := 0\n    for i, line in rawLines {\n        clean := StrReplace(line, \"`t\", \"    \")\n        rawLines[i] := clean\n        if (StrLen(clean) > maxLen)\n            maxLen := StrLen(clean)\n    }\n    \n    ; Build borders (only borders are commented, content stays as-is)\n    borderChar := commentStyle.border\n    topBorder := commentStyle.prefix . \" \" . StrRepeat(borderChar, maxLen + 3)\n    bottomBorder := topBorder\n    \n    ; Assemble output: commented borders + content with commented side borders\n    output := topBorder . \"`r`n\"\n    for line in rawLines {\n        ; Calculate padding to align vertical border with horizontal border end\n        padding := StrRepeat(\" \", maxLen + 4 - StrLen(line))\n        output .= line . padding . commentStyle.prefix . \"`r`n\"\n    }\n    output .= bottomBorder\n    \n    ; Replace selection with bordered text\n    A_Clipboard := output\n    Sleep 50\n    Send(\"^v\")\n}\n\nDetectCommentStyle(windowTitle) {\n    ; Convert to lowercase for easier matching\n    title := StrLower(windowTitle)\n    \n    ; Detect based on file extension or application\n    if (InStr(title, \".py\") || InStr(title, \"python\") || InStr(title, \"pycharm\")) {\n        return {type: \"line\", prefix: \"#\", border: \"#\"}\n    } else if (InStr(title, \".ps1\") || InStr(title, \"powershell\") || InStr(title, \"ise\")) {\n        return {type: \"line\", prefix: \"#\", border: \"#\"}\n    } else if (InStr(title, \".css\")) {\n        return {type: \"line\", prefix: \"/*\", border: \"*\"}\n    } else if (InStr(title, \".js\") || InStr(title, \".ts\") || InStr(title, \".java\") || InStr(title, \".c\") || InStr(title, \".cpp\")) {\n        return {type: \"line\", prefix: \"//\", border: \"/\"}\n    } else if (InStr(title, \".ahk\") || InStr(title, \"autohotkey\")) {\n        return {type: \"line\", prefix: \";\", border: \"#\"}\n    } else if (InStr(title, \".bat\") || InStr(title, \".cmd\")) {\n        return {type: \"line\", prefix: \"REM\", border: \"=\"}\n    } else {\n        ; Default fallback\n        return {type: \"line\", prefix: \"#\", border: \"#\"}\n    }\n}\n\nStrRepeat(char, count) {\n    result := \"\"\n    Loop count\n        result .= char\n    return result\n}"
        },
        {
            "name": "Merge all window in a single explorer",
            "category": "General",
            "description": "",
            "hotkey": "#e",
            "action": "MergeAllExplorerWindows()\nMergeAllExplorerWindows() {\n    windows := WinGetList(\"ahk_class CabinetWClass\")\n    \n    if windows.Length <= 1 {\n        if windows.Length == 0 {\n            Run(\"explorer.exe\")\n        }\n        return\n    }\n    \n    mainWindow := 0\n    for hwnd in windows {\n        if WinActive(\"ahk_id \" . hwnd) {\n            mainWindow := hwnd\n            break\n        }\n    }\n    \n    if mainWindow == 0 {\n        mainWindow := windows[1]\n    }\n    \n    WinActivate(\"ahk_id \" . mainWindow)\n    WinWaitActive(\"ahk_id \" . mainWindow, , 2)\n    \n    for hwnd in windows {\n        if hwnd != mainWindow {\n            try {\n                path := GetExplorerPath(hwnd)\n                \n                if path != \"\" && path != \"Desktop\" && path != \"This PC\" {\n                    WinActivate(\"ahk_id \" . mainWindow)\n                    Sleep(100)\n                    Send(\"^t\")\n                    Sleep(200)\n                    Send(\"^l\")\n                    Sleep(100)\n                    \n                    ; Fix spaces in path\n                    path := StrReplace(path, \"%20\", \" \")\n                    \n                    ; Handle file:// URLs\n                    if InStr(path, \"file:///\") {\n                        path := StrReplace(path, \"file:///\", \"\")\n                        path := StrReplace(path, \"/\", \"\\\")\n                    }\n                    \n                    SendText(path)\n                    Send(\"{Enter}\")\n                    Sleep(300)\n                }\n                \n                WinClose(\"ahk_id \" . hwnd)\n                Sleep(100)\n            } catch {\n                WinClose(\"ahk_id \" . hwnd)\n            }\n        }\n    }\n    \n    WinActivate(\"ahk_id \" . mainWindow)\n}\n\nGetExplorerPath(hwnd) {\n    try {\n        for window in ComObject(\"Shell.Application\").Windows {\n            try {\n                if window.HWND == hwnd {\n                    url := window.LocationURL\n                    name := window.LocationName\n                    \n                    if url != \"\" {\n                        return url\n                    } else if name != \"\" {\n                        return name\n                    }\n                }\n            }\n        }\n        \n        title := WinGetTitle(\"ahk_id \" . hwnd)\n        \n        if InStr(title, \" - File Explorer\") {\n            title := StrReplace(title, \" - File Explorer\", \"\")\n        }\n        \n        return title\n        \n    } catch {\n        return \"\"\n    }\n}",
            "enabled": true
        },
        {
            "name": "autofill job field",
            "category": "General",
            "description": "",
            "hotkey": "!n",
            "action": "Run(\"C:\\Users\\nahid\\ms\\msBackups\\@JOB\\autofill.ahk\", \"\", \"Hide\")",
            "enabled": true
        },
        {
            "name": "Open With Preferred Editor",
            "category": "General",
            "description": "",
            "hotkey": "^!n",
            "action": "OpenWithEditor()\nOpenWithEditor() {\n; Configuration - Change this to switch editors easily\nEDITOR := \"nvim\"  ; Options: \"nvim\", \"vscode\", \"zed\"\n    ; Backup current clipboard content\n    ClipboardBackup := ClipboardAll()\n    \n    ; Clear clipboard and copy the selected file path\n    A_Clipboard := \"\"\n    Send(\"^c\")\n    \n    if !ClipWait(1) {\n        MsgBox(\"No valid file path found.\")\n        A_Clipboard := ClipboardBackup\n        return\n    }\n    \n    ClipBoardContent := A_Clipboard\n    \n    if InStr(ClipBoardContent, \"\\\") {\n        switch EDITOR {\n            case \"nvim\":\n                Run('wt.exe nvim \"' . ClipBoardContent . '\"')\n            case \"vscode\":\n                Run('\"C:\\Users\\nahid\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" \"' . ClipBoardContent . '\"')\n            case \"zed\":\n                Run('zed \"' . ClipBoardContent . '\"')\n            default:\n                MsgBox(\"Unknown editor: \" . EDITOR)\n        }\n    } else {\n        MsgBox(\"No valid file path found.\")\n    }\n    \n    ; Restore original clipboard content\n    A_Clipboard := ClipboardBackup\n}",
            "enabled": true
        },
        {
            "name": "komorebi stop/start",
            "category": "General",
            "description": "",
            "hotkey": "^+k",
            "action": "komo_start_stop()\nkomo_start_stop() {\nRunWait \"powershell.exe -Command Stop-Process -Name komorebi -ErrorAction SilentlyContinue\", , \"Hide\"\nRun \"komorebic.exe start\", , \"Hide\"\n}",
            "enabled": true
        }
    ],
    "text_shortcuts": [
        {
            "name": "AutoHotkey Version 1",
            "description": "Inserts AHK v1 header requirement",
            "trigger": ";v1",
            "replacement": "{#}Requires AutoHotkey v1.0",
            "category": "AHK",
            "enabled": true
        },
        {
            "name": "AutoHotkey Version 2",
            "description": "Inserts AHK v2 header requirement",
            "trigger": ";v2",
            "replacement": "{#}Requires AutoHotkey v2.0",
            "category": "AHK",
            "enabled": true
        },
        {
            "name": "Registry Run Path",
            "description": "Windows startup registry path run",
            "trigger": ";run",
            "replacement": "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
            "category": "Path"
        },
        {
            "name": "PowerShell Symlink",
            "description": "PowerShell command to create symbolic link",
            "trigger": ";mklink",
            "replacement": "New-Item -ItemType SymbolicLink -Path \"Fake\" -Target \"Original\" -Force",
            "category": "Shell"
        },
        {
            "name": "Symbols",
            "description": "  󰩷  󰣉  󰁄 󰁌 󰞘 󰜴 󱞩 󱞫 󰤼",
            "trigger": ";--",
            "replacement": "",
            "category": "Icon/Emoji/Sign"
        },
        {
            "name": "Writers list of writings",
            "category": "Temporary",
            "description": "",
            "trigger": ";list",
            "replacement": "x\n(\n\nরচনা:\nকাব্যগ্রন্থ/গদ্যকাব্য:\nকবিতা:\nউপন্যাস:\nনাটক:\nসনেট:\nছোটগল্প/গল্প:\nগদ্যগ্রন্থ-প্রবন্ধ:\nঅনুবাদ গ্রন্থ:\nবই:\nঅন্যান্য:\nপংক্তি এবং উদ্ধৃতি:\n)"
        },
        {
            "name": "Star",
            "category": "Icon/Emoji/Sign",
            "description": "",
            "trigger": ";star",
            "replacement": ""
        },
        {
            "name": "Db path",
            "category": "Path",
            "description": "",
            "trigger": ";db",
            "replacement": "C:\\Users\\nahid\\ms\\db"
        },
        {
            "name": "Changes for Ai to know that i made on my files",
            "category": "General",
            "description": "",
            "trigger": ";change",
            "replacement": "ok i have made some changes from last time  so keep that in mind now"
        },
        {
            "name": "Percentage %",
            "category": "Text",
            "description": "",
            "trigger": ";%",
            "replacement": "℅",
            "enabled": true
        }
    ]
}