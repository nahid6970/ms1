# Create a Complete PyAutoGUI Game Automation Tool

Please create a complete, fully functional Python GUI application for game automation (specifically Shadow Fight 3) with the following specifications:

## Core Requirements

**Main Framework**: Use tkinter for the GUI with a dark theme (#2b2b2b background)

**Key Libraries to Import**:
```python
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog
import json
import os
import threading
import time
import pyautogui
import pygetwindow as gw
from datetime import datetime
from pathlib import Path
```

## Application Structure

### Main Window Layout (1200x800)
- **Left Panel**: Event Management
  - Event list with scrollbar
  - Add/Delete/Rename event buttons
  - Image list for selected event
  - Add/Delete/Edit image buttons

- **Right Panel**: Image Configuration
  - Image path with browse button
  - Confidence slider (0.1-1.0, default 0.8)
  - Region coordinates (4 entry fields: x1,y1,x2,y2)
  - Action type dropdown with 5 options:
    - key_press
    - key_sequence  
    - mouse_click
    - mouse_sequence
    - custom_function

- **Bottom Panel**: Control buttons for starting/stopping each event

## Core Features to Implement

### 1. Event Management System
```python
# Data structure for events
self.events_data = {
    "event_name": {
        "images": [
            {
                "name": "image_name",
                "path": "/path/to/image.png",
                "confidence": 0.8,
                "region": [x1, y1, x2, y2] or None,
                "action": {
                    "type": "key_press",
                    "key": "space",
                    "delay": 0.1
                }
            }
        ],
        "enabled": True
    }
}
```

### 2. Action Configuration Forms
Create dynamic forms based on action type selection:

**Key Press**: Key field + delay field
**Key Sequence**: Sequence field (format: "key1,delay1,key2,delay2")
**Mouse Click**: X,Y coordinates + delay + "Get Position" button
**Mouse Sequence**: Sequence field (format: "x1,y1,delay1,x2,y2,delay2")
**Custom Function**: Function name + parameters (JSON format)

### 3. Image Detection & Automation Loop
```python
def run_event(self, event_name):
    while not self.stop_flags[event_name]:
        # Focus target window
        self.focus_window("LDPlayer")
        
        # Check each image in the event
        for image_data in event_data["images"]:
            if self.find_image_and_execute(image_data):
                break  # Found and executed, restart loop
        
        time.sleep(0.1)  # Small delay between cycles

def find_image_and_execute(self, image_data):
    try:
        location = pyautogui.locateOnScreen(
            image_data["path"],
            confidence=image_data["confidence"],
            grayscale=True,
            region=image_data.get("region")
        )
        if location:
            self.execute_action(image_data["action"])
            return True
    except Exception as e:
        print(f"Error: {e}")
    return False
```

### 4. Action Execution System
Handle all 5 action types:
- Key press with pyautogui.press()
- Key sequences with multiple presses and delays
- Mouse clicks with pyautogui.click()
- Mouse sequences with multiple clicks
- Custom functions (implement 3 example functions: collect_reward, battle_sequence, upgrade_equipment)

### 5. Window Management
- Focus on target window using pygetwindow
- Handle minimized windows with restore()
- Window title configuration (default: "LDPlayer")

### 6. Configuration Management
- Auto-save to JSON file "sf3_automation_config.json"
- Export/Import functionality
- Config validation and error handling

### 7. Threading System
- Each event runs in separate daemon thread
- Stop flags for graceful shutdown
- Thread management for start/stop buttons
- Update button text: "Start EventName" / "Stop EventName"

### 8. Custom Function Framework
Implement a simple framework for users to add their own custom functions:
```python
def execute_custom_function(self, function_name, params, window):
    """Framework for executing custom functions"""
    # User can add their own custom functions here
    print(f"Custom function '{function_name}' called with params: {params}")
    # Example of how users would add their own:
    # if function_name == "my_custom_function":
    #     self.my_custom_function(params, window)
```

### 9. Utility Features
- Screenshot tool with timestamp
- Test image recognition function
- Mouse position capture (wait for spacebar press)
- Region selection helper
- Available windows listing

### 10. Menu System
**File Menu**: New, Open, Save, Export, Import, Exit
**Tools Menu**: Screenshot Tool, Test Image Recognition, Window Settings
**Help Menu**: About, Help dialog

### 10. Custom Function System
- Framework to allow users to add their own custom functions
- Simple method to register new custom functions by name
- Parameter passing system using JSON format
- Empty framework ready for user expansion

### 11. Error Handling & Safety
- Try-catch blocks around all pyautogui operations
- File existence checks for images
- JSON validation for config files
- Thread safety for GUI updates
- Graceful shutdown on window close

## Additional Implementation Details

### GUI Styling
- Dark theme with #2b2b2b background
- Use ttk widgets for modern look
- Listboxes with #404040 background, white text
- Proper padding and spacing

### Data Validation
- Check image file paths exist
- Validate coordinate inputs
- Ensure confidence is between 0.1-1.0
- JSON format validation for custom function parameters

### Performance Optimization
- Use grayscale for faster image detection
- Region-based searching when specified
- Minimal delay between detection cycles
- Efficient thread management

### User Experience
- Intuitive workflow: Create Event → Add Images → Configure Actions → Start
- Real-time feedback with status updates
- Confirmation dialogs for destructive actions
- Helpful error messages and tooltips

## Sample Custom Functions to Include
```python
def execute_custom_function(self, function_name, params, window):
    """
    Framework for custom functions - users add their own functions here
    Example usage in JSON:
    "action": {
        "type": "custom_function", 
        "function": "my_function_name",
        "params": "{\"key\": \"value\"}"
    }
    """
    print(f"Custom function '{function_name}' not implemented")
    print(f"Add your custom function logic here for: {function_name}")
    print(f"Parameters received: {params}")
    
    # Users would add their functions like this:
    # if function_name == "collect_all_rewards":
    #     self.collect_all_rewards(params, window)
    # elif function_name == "auto_battle":
    #     self.auto_battle(params, window)
```

## Final Requirements
- Complete, runnable script
- All functions fully implemented
- Proper error handling throughout
- Comments explaining complex sections
- Professional code structure with clear class organization
- No placeholder functions - everything should work

Make sure the application is production-ready with robust error handling and a professional user interface. The tool should be able to handle multiple events running simultaneously, save/load configurations reliably, and provide a smooth user experience for game automation tasks.

also make it so after creatin event and add image will pop up a gui to input items not in the right side and then i can input the path add region key press etc and  edit will do the same currently having issue with add image and it doesnt add region or kkey press functions properly