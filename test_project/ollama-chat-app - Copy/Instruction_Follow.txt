# Example naming_instructions.txt

Create this file in the same directory as your server.py with the following content:

```
1. Look for filename in comments at the top of the script
2. Search for explicit filename in conversation context
3. Extract filename from patterns like "create X" or "build Y"
4. Use class names or function names from code structure
5. Extract filename from project context keywords
6. Use default filenames based on language
```

## How to customize:

You can modify the instructions or add new ones. The system supports:

### Built-in instruction types:
- **Step 1**: Looks for `// filename: myfile.js` or `# filename: myfile.py` in code comments
- **Step 2**: Searches context for "style.css", "script.js", etc.
- **Step 3**: Finds patterns like "create calculator" â†’ "calculator"
- **Step 4**: Uses class/function names from code
- **Step 5**: Recognizes project keywords (landing, portfolio, etc.)
- **Step 6**: Falls back to defaults (index.html, styles.css, etc.)

### Custom instruction examples:
```
7. Add prefix "my_" to all filenames
8. Add suffix "_component" to JavaScript files
9. Use project name from context as prefix
10. For CSS files, always use "styles" as basename
```

### Special syntax:
- `prefix "text"` - adds prefix to filename
- `suffix "text"` - adds suffix to filename
- `use default` - uses language default names

## Example usage scenarios:

**For organized project structure:**
```
1. Look for filename in comments at the top of the script
2. Add prefix "project_" to all filenames
3. Use class names or function names from code structure
4. Use default filenames based on language
```

**For component-based development:**
```
1. Look for filename in comments at the top of the script
2. Search for explicit filename in conversation context
3. Add suffix "_component" to JavaScript files
4. Add suffix "_styles" to CSS files
5. Use default filenames based on language
```